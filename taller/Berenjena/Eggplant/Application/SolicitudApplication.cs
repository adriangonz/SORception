using Eggplant.DTO;
using Eggplant.Entity;
using Eggplant.Exceptions;
using Eggplant.ServiceTaller;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Web;

namespace Eggplant.Application
{
    public class SolicitudApplication : AbstractApplication
    {
        public IEnumerable<Entity.Solicitud> getByUser(string userId)
        {
            return dataService.Solicitudes.Get(x => x.user_id == userId);
        }

        public Entity.Solicitud getDetailById(string userId, int solicitudId)
        {
            var solicitud = dataService.Solicitudes.GetFirstWithAll(x => x.user_id == userId && x.id == solicitudId);

            var ofertas = sgService.getOfertas(solicitud.sg_id);
            addAutogeneratedPedidios(ofertas, solicitud);
            foreach (var lineaSolicitud in solicitud.rawLines)
            {
                foreach (var oferta in ofertas)
                {
                    lineaSolicitud.offers.AddRange(oferta.lineas.AsQueryable().Where(lOfer => lOfer.linea_solicitud_id == lineaSolicitud.sg_id).ToList());
                }
            }

            return solicitud;
        }

        private void addAutogeneratedPedidios(List<ExpOferta> ofertas, Solicitud solicitud)
        {
            Pedido p = new Pedido();
            p.solicitud = solicitud;

            // las lineas de oferta que tienen un pedido asociado y no estan en la bd
            List<LineaPedido> lineasQueNoEstanInternas = new List<LineaPedido>();
            foreach (var oferta in ofertas)
            {
                foreach (var lineaOferta in oferta.lineas)
                {
                    if (lineaOferta.isPedida() && dataService.LineasPedido.Get(lp => lp.sg_linea_oferta_id == lineaOferta.id).Count() == 0)
                    {
                        
                        LineaPedido lp = new LineaPedido();
                        lp.quantity = lineaOferta.linea_solicitud.quantity;
                        lp.sg_linea_oferta_id = lineaOferta.id;
                        lp.price = lineaOferta.price;
                        lp.status = LineaPedido.AUTOGENERATED;
                        lp.sg_lina_solicitud_id = lineaOferta.linea_solicitud_id;
                        p.rawLines.Add(lp);
                    }
                }
            }
            dataService.Pedidos.Insert(p);
            dataService.SaveChanges();
        }
        /*
        var userId = User.Identity.GetUserId();
        Solicitud solicitud = null;
        BDBerenjenaContainer c_bd = new BDBerenjenaContainer();

        solicitud = c_bd.SolicitudSet.AsQueryable().First(x => x.Id == id && x.user_id == userId);

        if (solicitud == null) return Request.CreateResponse(HttpStatusCode.NotFound, "La solicitud " + id + " no existe o no es de el usuario actual");
        var ofertas = svcTaller.getOfertas(solicitud.sg_id).ToList();

        foreach (var item in solicitud.LineaSolicitud)
        {
            int sol_id_sg = item.sg_id;
            foreach (var oferta in ofertas)
            {
                    
                // las lineas de oferta que tienen un pedido asociado y no estan en la bd
                List<ExpOfertaLine> lineasQueNoEstanInternas = new List<ExpOfertaLine>();
                foreach (var lineaOferta in oferta.lineas)
                {
                    if (lineaOferta.isPedida() && c_bd.LineaPedidoSet.AsQueryable().Where(lp => lp.linea_oferta_id == lineaOferta.id).Count() == 0) { 
                        lineasQueNoEstanInternas.Add(lineaOferta);
                    }
                }
                     

                if (lineasQueNoEstanInternas.Count > 0)// se anyaden a la bd interna
                {
                    Pedido p = new Pedido();
                    p.Solicitud = solicitud;
                    p.timeStamp = DateTime.Now;
                    foreach (var lineaOfertaExterna in lineasQueNoEstanInternas)
                    {
                        LineaPedido lp = new LineaPedido();
                        lp.quantity = lineaOfertaExterna.linea_solicitud.quantity;
                        lp.linea_oferta_id = lineaOfertaExterna.id;
                        lp.price = (decimal)lineaOfertaExterna.price;
                        //lp.date = lineaOfertaExterna.date;
                        lp.state = "AUTOGENERATED";
                        lp.sg_id = lineaOfertaExterna.linea_solicitud_id;
                        p.LineaPedido.Add(lp);
                    }
                    c_bd.PedidoSet.Add(p);
                }
                item.offers.AddRange(oferta.lineas.AsQueryable().Where(x => x.linea_solicitud_id == sol_id_sg).ToList());
            }
                
        }

        c_bd.SaveChanges();
        return solicitud; */


        public int Request(SolicitudPostDTO solPost, string userId)
        {
            Solicitud sol_interna = new Solicitud();
            sol_interna.status = Solicitud.FAILED;
            sol_interna.user_id = userId;
            sol_interna.rawLines = solPost.toEntity();
            dataService.Solicitudes.Insert(sol_interna);
            dataService.SaveChanges();

            List<ExpSolicitudLine> lineas_externas = new List<ExpSolicitudLine>();
            foreach (var lin_interna in sol_interna.rawLines)
            {
                ExpSolicitudLine lin_externa = new ExpSolicitudLine();
                lin_externa.id_en_taller = lin_interna.id;
                lin_externa.description = lin_interna.descripcion;
                lin_externa.quantity = lin_interna.cantidad;
                lin_externa.flag = ExpSolicitudLine.castToFlag(lin_interna.criterio);
                lineas_externas.Add(lin_externa);
            }
            ExpSolicitud sol_externa = new ExpSolicitud();
            sol_externa.id_en_taller = sol_interna.id;
            sol_externa.deadline = solPost.deadline;
            sol_externa.lineas = lineas_externas.ToArray();

            //Lanzo la peticion de alta al sistema gestor
            int resId = sgService.addSolicitud(sol_externa);
            //Si algo ha ido mal
            if (resId == -1)
                throw new ApplicationLayerException(HttpStatusCode.InternalServerError, "Algo ha ido mal en el SG al anyadir la nueva solicitud");


            addSolicitudToLocalDB(resId, sol_interna.id); //Guardo la solicitud en la base de datos local

            return resId;
        }


        private void addSolicitudToLocalDB(int idSol, int idInterno)
        {
            ExpSolicitud solExtern = sgService.getSolicitud(idSol);
            if (solExtern != null)
            {

                Solicitud s = dataService.Solicitudes.GetByID(idInterno);
                if (s != null)
                {
                    s.sg_id = solExtern.id;
                    s.status = solExtern.status;
                    foreach (var linSolicitudExtern in solExtern.lineas)
                    {
                        var lineaInterna = dataService.LineasSolicitud.GetByID(linSolicitudExtern.id_en_taller);
                        if (lineaInterna != null)
                        {
                            lineaInterna.sg_id = linSolicitudExtern.id;
                            lineaInterna.status = linSolicitudExtern.status;
                        }
                    }
                    dataService.SaveChanges();
                }

            }
        }
    }
}