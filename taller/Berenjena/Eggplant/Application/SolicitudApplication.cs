using Eggplant.DTO;
using Eggplant.Entity;
using Eggplant.Exceptions;
using Eggplant.ServiceTaller;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Web;

namespace Eggplant.Application
{
    public class SolicitudApplication : AbstractApplication
    {
        public IEnumerable<Entity.Solicitud> getByUser()
        {
            return dataService.Solicitudes.getAllWithAll();
        }

        public Entity.Solicitud getDetailById(int solicitudId)
        {
            var solicitud = dataService.Solicitudes.GetFirstWithAll(x => x.id == solicitudId);

            var ofertas = sgService.getOfertas(solicitud.sg_id);
            addAutogeneratedPedidios(ofertas, solicitud);
            foreach (var lineaSolicitud in solicitud.rawLines)
            {
                foreach (var oferta in ofertas)
                {
                    lineaSolicitud.offers.AddRange(oferta.lineas.AsQueryable().Where(lOfer => lOfer.linea_solicitud_id == lineaSolicitud.sg_id).ToList());
                }
            }

            return solicitud;
        }

        private void addAutogeneratedPedidios(List<ExpOferta> ofertas, Solicitud solicitud)
        {
            Pedido p = new Pedido();
            p.solicitud = solicitud;

            // las lineas de oferta que tienen un pedido asociado y no estan en la bd
            List<LineaPedido> lineasQueNoEstanInternas = new List<LineaPedido>();
            foreach (var oferta in ofertas)
            {
                
                foreach (var lineaOferta in oferta.lineas)
                {
                    if (lineaOferta.isPedida() && dataService.LineasPedido.Get(lp => lp.sg_linea_oferta_id == lineaOferta.id).Count() == 0)
                    {

                        LineaPedido lp = new LineaPedido();
                        lp.quantity = lineaOferta.CantidadPedida;
                        lp.sg_linea_oferta_id = lineaOferta.id;
                        lp.price = lineaOferta.price;
                        lp.status = LineaPedido.AUTOGENERATED;
                        lp.sg_lina_solicitud_id = lineaOferta.linea_solicitud_id;
                        p.rawLines.Add(lp);
                        
                    }
                }
            }

            dataService.Pedidos.Insert(p);
            dataService.SaveChanges();
            dataService.Audits.create(Audit.INFO, " Autogenerated pedido with id "+ p.id);
        }


        public int Request(SolicitudPostDTO solPost)
        {
            Solicitud sol_interna = new Solicitud();
            sol_interna.status = Solicitud.FAILED;
            sol_interna.rawLines = solPost.toEntity();
            dataService.Solicitudes.Insert(sol_interna);
            dataService.SaveChanges();
            dataService.Audits.create(Audit.INFO, "Added temporal solicitud to dataBase with estatus " + sol_interna.status);
            dataService.SaveChanges();

            List<ExpSolicitudLine> lineas_externas = new List<ExpSolicitudLine>();
            foreach (var lin_interna in sol_interna.rawLines)
            {
                ExpSolicitudLine lin_externa = new ExpSolicitudLine();
                lin_externa.id_en_taller = lin_interna.id;
                lin_externa.description = lin_interna.descripcion;
                lin_externa.quantity = lin_interna.cantidad;
                lin_externa.flag = ExpSolicitudLine.castToFlag(lin_interna.criterio);
                lin_externa.action = SolicitudLineDTO.NEW;
                lineas_externas.Add(lin_externa);
            }
            ExpSolicitud sol_externa = new ExpSolicitud();
            sol_externa.id_en_taller = sol_interna.id;
            sol_externa.deadline = solPost.deadline;
            sol_externa.lineas = lineas_externas.ToArray();

            int resId = -1;
            
            //Lanzo la peticion de alta al sistema gestor
            resId = sgService.addSolicitud(sol_externa);
            //Si algo ha ido mal
            if (resId == -1)
            {
                dataService.Audits.create(Audit.ERROR, "SistemaGestor it was return a request with " + resId);
                throw new ApplicationLayerException(HttpStatusCode.InternalServerError, "Algo ha ido mal en el SG al anyadir la nueva solicitud");
            }


            addSolicitudToLocalDB(resId, sol_interna.id); //Guardo la solicitud en la base de datos local

            dataService.Audits.create(Audit.INFO, " Created solicitud with id " + sol_interna.id);
            dataService.SaveChanges();

            return resId;
        }

        public object PutRequest(int idSolicitud, SolicitudPostDTO solicitudDTO)
        {
            var solicitudInterna = dataService.Solicitudes.GetFirstWithAllById(idSolicitud);
            var solicitudExterna = sgService.getSolicitud(solicitudInterna.sg_id);

            List<ExpSolicitudLine> lineasExternas = new List<ExpSolicitudLine>();
            List<LineaSolicitud> lineasInternas = new List<LineaSolicitud>();
            try
            {
                
                foreach (var lineaSolicitudDTO in solicitudDTO.data)
                {
                    // Modificacion interna y externa
                    LineaSolicitud linIn = null;
                    ExpSolicitudLine linExterna = new ExpSolicitudLine();
                    if (lineaSolicitudDTO.update == SolicitudLineDTO.NEW)
                    {
                        linIn = new LineaSolicitud();
                        linIn.descripcion = lineaSolicitudDTO.descripcion;
                        linIn.cantidad = lineaSolicitudDTO.cantidad;
                        linIn.criterio = lineaSolicitudDTO.criterio.code.ToString();
                        linIn.status = LineaSolicitud.ADDED_AFTER;
                        solicitudInterna.rawLines.Add(linIn);
                        dataService.SaveChanges();

                        linExterna.description = lineaSolicitudDTO.descripcion;
                        linExterna.quantity = lineaSolicitudDTO.cantidad;
                        linExterna.id_en_taller = linIn.id;
                        linExterna.flag = ExpSolicitudLine.castToFlag(lineaSolicitudDTO.criterio.code.ToString());

                        lineasInternas.Add(linIn);
                    }
                    else if (lineaSolicitudDTO.update == SolicitudLineDTO.UPDATED)
                    {
                        linIn = dataService.LineasSolicitud.GetByID(lineaSolicitudDTO.id);
                        linIn.descripcion = lineaSolicitudDTO.descripcion;
                        linIn.cantidad = lineaSolicitudDTO.cantidad;
                        linIn.criterio = lineaSolicitudDTO.criterio.code.ToString();
                        
                        linExterna.id = linIn.sg_id;
                        linExterna.description = lineaSolicitudDTO.descripcion;
                        linExterna.quantity = lineaSolicitudDTO.cantidad;
                        linExterna.id_en_taller = linIn.id;
                        linExterna.flag = ExpSolicitudLine.castToFlag(lineaSolicitudDTO.criterio.code.ToString());
                    }
                    else if (lineaSolicitudDTO.update == SolicitudLineDTO.DELETED)
                    {
                        linIn = dataService.LineasSolicitud.GetByID(lineaSolicitudDTO.id);
                        linExterna.id = linIn.sg_id;
                        linIn.status = LineaSolicitud.DELETED;
                    }
                    else
                    {
                        throw new ApplicationLayerException(HttpStatusCode.BadRequest, "Bad efect option: " + lineaSolicitudDTO.update);
                    }
                    linExterna.action = linExterna.status = lineaSolicitudDTO.update;
                    lineasExternas.Add(linExterna);

                }

                solicitudExterna.lineas = lineasExternas.ToArray();

                sgService.putSolicitud(solicitudExterna);
                var lineasExternasActualizadas = sgService.getSolicitud(solicitudInterna.sg_id).lineas.ToList();
                // Cargo los id generados en el sg a la db interna
                foreach (var linea in lineasInternas)
                {
                    foreach (var lineaExternaActualizada in lineasExternasActualizadas)
                    {
                        if (lineaExternaActualizada.id_en_taller == linea.id)
                        {
                            linea.sg_id = lineaExternaActualizada.id;
                        }
                    }

                }
                dataService.SaveChanges();
            }
            catch (Exception)
            {
                dataService.LineasSolicitud.RemoveRange(lineasInternas);
                dataService.SaveChanges();
                throw;
            }

            return idSolicitud;
        }

        public void deleteSolicitud(int id)
        {
            dataService.Solicitudes.Delete(id);
        }


        private void addSolicitudToLocalDB(int idSol, int idInterno)
        {
            ExpSolicitud solExtern = sgService.getSolicitud(idSol);
            if (solExtern != null)
            {

                Solicitud s = dataService.Solicitudes.GetByID(idInterno);
                if (s != null)
                {
                    s.sg_id = solExtern.id;
                    s.status = solExtern.status;
                    foreach (var linSolicitudExtern in solExtern.lineas)
                    {
                        var lineaInterna = dataService.LineasSolicitud.GetByID(linSolicitudExtern.id_en_taller);
                        if (lineaInterna != null)
                        {
                            lineaInterna.sg_id = linSolicitudExtern.id;
                            lineaInterna.status = linSolicitudExtern.status;
                        }
                    }
                    dataService.SaveChanges();
                }

            }
        }
    }
}